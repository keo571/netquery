# PostgreSQL Configuration (Production-like)
# Docker-based PostgreSQL server
# Perfect for: Production testing, performance testing, multi-user scenarios

# ============================================================================
# Database Configuration
# ============================================================================
NETQUERY_ENV=prod
CANONICAL_SCHEMA_PATH=schema_files/prod_schema.json
DATABASE_URL=postgresql://netquery:netquery_dev_password@localhost:5432/netquery
EXCEL_SCHEMA_PATH=schema_files/load_balancer_schema.xlsx

# ============================================================================
# LLM Configuration (Required)
# ============================================================================
GEMINI_API_KEY=your_gemini_api_key_here

# ============================================================================
# Embedding Storage
# ============================================================================
# Embeddings stored locally in .embeddings_cache/ directory
# No database configuration needed
# (Optional: EMBEDDING_DATABASE_URL for pgvector if needed in future)

# ============================================================================
# Logging
# ============================================================================
LOG_LEVEL=INFO

# ============================================================================
# Usage
# ============================================================================
# 1. Start PostgreSQL:     docker-compose up -d
# 2. Switch to PostgreSQL: ./setup/switch_database.sh postgres
# 3. Create sample data:   python setup/create_data_postgres.py
# 4. Query:                NETQUERY_ENV=prod python gemini_cli.py "Show me all load balancers"
#
# Stop PostgreSQL:         docker-compose down
# View data:               Open http://localhost:5050 (pgAdmin: admin@netquery.local / admin)
